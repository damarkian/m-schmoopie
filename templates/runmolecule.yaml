spec:
  templates:
  - name: run-molecule
    parent: generic-task
    inputs:
      parameters:
      - name: rawgeometry
      - name: basisset
      - name: command
        value: python3 main.py
      artifacts:
      - name: main-script
        path: /app/main.py
        raw:
          data: |
            import os
            import h5py
            import json
            import base64
            from openfermion.hamiltonians import MolecularData
            from openfermionpsi4 import run_psi4
            from schmoopie.qmolecule import create_molecule
 
            description = "h2"
            rawgeometry = "{{inputs.parameters.rawgeometry}}"
            geometry = eval(rawgeometry)
            basisset = '{{inputs.parameters.basisset}}'
            charge = 0
            multiplicity = 1
            filename = '/app/moleculedata.hdf5'

            create_molecule(geometry, basisset, multiplicity, charge, description, filename)

            
            with h5py.File('/app/moleculedata.hdf5') as h5f:
              ehf = h5f['hf_energy']
              emp2 = h5f['mp2_energy']
          
            opd = {}
            opd["schema"] = "schmoopie-result"
            # opd["properties"] = str(list(h5f.keys()))
            opd["hfenergy"] = str(ehf)
            opd["mp2energy"] = str(emp2)

            with open("/app/moleculedata.hdf5", "rb") as hfile:
              encoded_string = base64.b64encode(hfile.read())

            opd["h5b64"] = str(encoded_string)
            
            with open('/app/results.json', 'w') as f:
              f.write(json.dumps(opd))
    

            
    outputs:
      artifacts:
        - name: results
          path: /app/results.json
        - name: moleculedata
          path: /app/moleculedata.hdf5

